name: Build and Push Docker image

on:
  push:
    branches: ["master"]
  workflow_dispatch:

concurrency:
  group: production
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Set up QEMU (for cross-architecture builds)
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          # GitHub Action cache for faster rebuilds
          cache-from: type=gha,scope=api,timeout=20m
          cache-to: type=gha,mode=max,scope=api,timeout=20m,ignore-error=true

          # Build context
          context: .

          # Enable multi-platform builds
          platforms: linux/amd64,linux/arm64

          # Push the image to the registry
          push: true

          # Turn off SBOM/Provenance if not needed
          provenance: false

          # Use the extracted tags and labels
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  deploy:
    needs: build-and-push-image
    runs-on: ubuntu-latest
    steps:
      - name: Call deployment webhook
        env:
          WEBHOOK_BASIC_AUTH: ${{ secrets.WEBHOOK_BASIC_AUTH }}
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
        run: |
          # Mask secrets in logs
          echo "::add-mask::$WEBHOOK_BASIC_AUTH"
          echo "::add-mask::$WEBHOOK_URL"

          # Trim any accidental newlines from secrets
          TRIMMED_AUTH=$(printf %s "$WEBHOOK_BASIC_AUTH" | tr -d '\r\n')
          TRIMMED_URL=$(printf %s "$WEBHOOK_URL" | tr -d '\r\n')

          # Build Authorization header explicitly (Basic base64(user:pass))
          AUTH_B64=$(printf %s "$TRIMMED_AUTH" | base64 | tr -d '\r\n')

          # Call webhook without printing response or progress; retry a few transient failures
          curl -fsSL -X POST \
            -H "Authorization: Basic $AUTH_B64" \
            -H 'Content-Type: application/json' \
            -H 'Accept: application/json' \
            -A 'GitHubActionsWebhook/1.0' \
            --retry 3 --retry-delay 2 --retry-connrefused --max-time 20 \
            -d '{"repository":"${{ github.repository }}","workflow":"${{ github.workflow }}","run_id":"${{ github.run_id }}","status":"${{ needs.build-and-push-image.result }}","sha":"${{ github.sha }}","ref":"${{ github.ref }}"}' \
            "$TRIMMED_URL" \
            --output /dev/null || true

  # deploy:
  #   needs: build-and-push-image
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: redeploy docker container using remote ssh
  #       uses: appleboy/ssh-action@v1.0.3
  #       with:
  #         host: ${{ secrets.HOST }}
  #         username: ${{ secrets.USERNAME }}
  #         key: ${{ secrets.KEY }}
  #         port: ${{ secrets.PORT }}
  #         script: |
  #           docker compose -f "${{ secrets.COMPOSE_LOCATION }}/compose.yaml" pull && \
  #           docker compose -f "${{ secrets.COMPOSE_LOCATION }}/compose.yaml" up -d --remove-orphans
